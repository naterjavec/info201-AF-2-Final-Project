mutate(percent_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
select(City, Country, percent_change)
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "10") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1])) %>%
mutate(percent_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(percent_change != 0) %>%
select(City, Country, percent_change)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1])) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, price_change)
View(food_change)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1])) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, price_change, food_percent)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1])) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1])) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
percent_change <- merge(food_change, temp_w_percent, by = "City")
ggplot(percent_change, aes(fill = price_change, y = percent_change, x = City)) +
geom_bar(position="stack", stat="identity")
ggplot(percent_change, aes(fill = food_percent, y = percent_change, x = City)) +
geom_bar(position="stack", stat="identity")
View(percent_change)
create_bar_chart <- function(food){
specific_data <- percent_change %>%
filter(cm_name == food)
return(ggplot(percent_change, aes(fill = food_percent, y = percent_change, x = City)) +
geom_bar(position="stack", stat="identity"))
}
print(create_bar_chart("Wheat"))
create_bar_chart <- function(food){
specific_data <- percent_change %>%
filter(cm_name == food)
return(ggplot(specific_data, aes(fill = food_percent, y = percent_change, x = City)) +
geom_bar(position="stack", stat="identity"))
}
print(create_bar_chart("Wheat"))
print(create_bar_chart("Oil"))
print(create_bar_chart("Fuel (diesel)"))
print(create_bar_chart("Rice"))
print(create_bar_chart("Sugar"))
print(create_bar_chart("Oil"))
print(create_bar_chart("Beans"))
print(create_bar_chart("Eggs"))
print(create_bar_chart("Rice (local)"))
print(create_bar_chart("Lentils"))
print(create_bar_chart("Maize (local)"))
print(create_bar_chart("Bread"))
print(create_bar_chart("Onions"))
print(create_bar_chart("Wheat flour"))
#Function to create bar plot based on specific foods
#Returns barchart with any city that has data about the food parameter entered
create_bar_chart <- function(food){
specific_data <- percent_change %>%
filter(cm_name == food)
return(plot_ly(specific_data, x = ~City, y = ~percent_change, type = 'bar', name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent, name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent'), barmode = 'stack'))
}
print(create_bar_chart("Wheat flour"))
return(plot_ly(specific_data, x = ~City, y = ~percent_change, type = 'bar', name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent, name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent')))
#Function to create bar plot based on specific foods
#Returns barchart with any city that has data about the food parameter entered
create_bar_chart <- function(food){
specific_data <- percent_change %>%
filter(cm_name == food)
return(plot_ly(specific_data, x = ~City, y = ~percent_change, type = 'bar', name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent, name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent')))
}
print(create_bar_chart("Wheat flour"))
print(create_bar_chart("Wheat"))
print(create_bar_chart("Rice"))
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == max(mp_year) | mp_year == min(mp_year)) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
View(food_change)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2012) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2012) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent)
percent_change <- merge(food_change, temp_w_percent, by = "City")
#Function to create bar plot based on specific foods
#Returns barchart with any city that has data about the food parameter entered
create_bar_chart <- function(food){
specific_data <- percent_change %>%
filter(cm_name == food)
return(plot_ly(specific_data, x = ~City, y = ~percent_change, type = 'bar', name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent, name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent')))
}
print(create_bar_chart("Wheat"))
print(create_bar_chart("Rice"))
print(create_bar_chart("Rice (local)"))
print(create_bar_chart("Lentils"))
print(create_bar_chart("Wheat"))
print(create_bar_chart("Wheat flour"))
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2012) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent, mp_month, mp_year)
View(food_prices)
food_change<- food_prices %>%
filter(mp_month == 10) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2014) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, food_percent, mp_month, mp_year)
percent_change <- merge(food_change, temp_w_percent, by = "City")
print(create_bar_chart("Rice"))
library(data.table)
specific_data <- percent_change %>%
filter(cm_name %like% "rice")
View(specific_data)
specific_data <- percent_change[percent_change$cm_name %like% "rice", ]
View(specific_data)
specific_data <- percent_change[percent_change$cm_name %like% "Rice", ]
View(specific_data)
#Function to create bar plot based on specific foods
#Returns barchart with any city that has data about the food parameter entered
create_bar_chart <- function(food){
specific_data <- percent_change[percent_change$cm_name %like% food, ]
return(plot_ly(specific_data, x = ~City, y = ~percent_change, type = 'bar', name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent, name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent')))
}
print(create_bar_chart("Rice"))
print(create_bar_chart("Wheat"))
print(create_bar_chart("Sugar"))
print(create_bar_chart("Lentils"))
print(create_bar_chart("Maize"))
print(create_bar_chart("Bread"))
print(create_bar_chart("Oil"))
print(create_bar_chart("Beans"))
#Wheat test
print(create_bar_chart("Oil"))
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Maket Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(
title = paste(food, "in", city, "over time"),
xaxis = "Time",
yaxis = "Price and Temperature (*C)"
))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Maket Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(
title = title,
xaxis = "Time",
yaxis = "Price and Temperature (*C)"
))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(
title = title,
xaxis = "Time",
yaxis = "Price and Temperature (*C)"
))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df){
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(xaxis = "Time",
yaxis = "Price and Temperature (*C)"
))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(
title = title,
yaxis = "Price and Temperature (*C)"
))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Delhi and wheat plot
Delhi_wheat <- data_and_plot("Delhi", "Wheat")
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
source('C:/Users/natal/Desktop/info201af/info201-AF-2-Final-Project/P2analysis.R', echo=TRUE)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "over time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title,
xaxis = "Date",
yaxis = "Price (local currency) and Temperature (*C)"))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
print(Lima_plot)
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
source('C:/Users/natal/Desktop/info201af/info201-AF-2-Final-Project/P2analysis.R', echo=TRUE)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title,
yaxis = "Price and Temperature (*C)"))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currnecy) and Average Temperature (*C)")))
}
#takes in city and food and returns information as plot
data_and_plot <- function(city, food){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
#Lima And Maize plot
Lima_plot <- data_and_plot("Lima", "Maize (local)")
print(Lima_plot)
#Function to create bar plot based on specific foods
#Returns barchart with any city that has data about the food parameter entered
create_bar_chart <- function(food){
specific_data <- percent_change[percent_change$cm_name %like% food, ]
return(plot_ly(specific_data,
x = ~City,
y = ~percent_change,
type = 'bar',
name = 'Temperature Percent Change') %>%
add_trace(y = ~food_percent,
name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent')))
}
#Rice tests
print(create_bar_chart("Rice"))
runApp()
runApp()
runApp()
