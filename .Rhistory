"CO", "CT", "DE", "FL", "GA", "HI",
"ID", "IL", "IN", "IA", "KS", "KY",
"LA", "ME", "MD", "MA", "MI", "MN",
"MS", "MO", "MT", "NE", "NV", "NH",
"NJ", "NM", "NY", "NC", "ND", "OH",
"OK", "OR", "PA", "RI", "SC", "SD",
"TN", "TX", "UT", "VT", "VA", "WA",
"WV", "WI", "WY")
base_uri <- "https://api.propublica.org/congress/v1/members/"
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
r <- GET(paste0(base_uri, id, ".json"), add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
#Get data from Propublica about a specific state
access_state_data <- function(state){
house_end <- "house/"
current_end <- "/current.json"
rep <- GET(paste0(base_uri, house_end, state, current_end), add_headers("X-API-KEY" = api_key))
rep_text <- content(rep, "text")
rep_data <- fromJSON(rep_text)
return(rep_data$results)
}
#returns a list of representatives for state entered as parameter
#defaults to Washington if no state entered
state_reps_list <- function(state){
if(missing(state)){
return(state_reps_list("WA"))
}
state_data <- access_state_data(state)
return(state_data$name)
}
rep_by_gender <- function(state){
if(missing(state)){
return(rep_by_gender("WA"))
}
state_data <- access_state_data(state)
gender <- data.frame(state_data$gender)
names(gender) <- "gender"
bar <- ggplot(gender, aes(gender)) + geom_bar(fill = "skyblue2") + coord_flip()
return(bar)
}
rep_by_party <- function(state){
if(missing(state)){
return(rep_by_party("WA"))
}
state_data <- access_state_data(state)
party <- data.frame(state_data$party)
names(party) <- "party"
bar <- ggplot(party, aes(party)) + geom_bar(fill = "skyblue2") + coord_flip()
return(bar)
}
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
r <- GET(paste0(base_uri, id, ".json"), add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
id <- toString(id)
r <- GET(paste0(base_uri, id, ".json"), add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
state_data <- access_state_data("CA")
id <- state_data %>%
filter(name == "Ken Calvert") %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
print(url)
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
names(r_data)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(url, office, phone, bills_sponsored) %>%
head(1)
shiny::runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
j = fromJSON(readLines(r), flatten = TRUE)$dokumentstatus
r_text <- content(j, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
more_info <- function(state, name){
ca <- access_state_data(state)
id <- ca %>%
filter(name == name) %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
x <- more_info("CA", "Ken Calvert")
function (txt, bigint_as_char)
{
if (length(txt) > 1) {
txt <- paste(txt, collapse = "\n")
}
.Call(R_parse, txt, bigint_as_char)
}
source('C:/Users/natal/Desktop/info201af/a7--naterjavec/propublica.R', echo=TRUE)
state_data <- access_state_data("CA")
id <- state_data %>%
filter(name == "Ken Calvert") %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
names(r_data)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(url, office, phone, bills_sponsored) %>%
head(1)
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
get_id <- function(name){
id <- state_data %>%
filter(name == name) %>%
pull(id)
return(toString(id))
}
get_id <- function(name, state){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == name) %>%
pull(id)
return(toString(id))
}
get_id <- function(state, name){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == name) %>%
pull(id)
return(toString(id))
}
x <- person_info("CA", "Ken Calvert")
person_info <- function(state, name){
id <- get_id(state, name)
return(id)
}
x <- person_info("CA", "Ken Calvert")
print(x)
get_id <- function(state, name){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == name) %>%
pull(id)
return(toString(id))
}
person_info <- function(state, name){
id <- get_id(state, name)
return(id)
}
x <- person_info("CA", "Ken Calvert")
get_id <- function(state, name){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == name) %>%
pull(id)
return(id)
}
id <- state_data %>%
filter(name == "Ken Calvert")
View(id)
y <- get_id("CA", "Ken Calvert")
get_id <- function(state, name){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == name)
return(id)
}
y <- get_id("CA", "Ken Calvert")
View(y)
get_id <- function(state, rep){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == rep)
return(id)
}
y <- get_id("CA", "Ken Calvert")
more_info <- function(state, rep){
ca <- access_state_data(state)
id <- ca %>%
filter(name == rep) %>%
pull(id)
id <- toString(id)
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
r_results <- r_data$results
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(url, office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
get_id <- function(state, rep){
state_data <- access_state_data(state)
id <- state_data %>%
filter(name == rep) %>%
pull(id)
return(id)
}
id_data_results <- function(id){
url <- paste0(base_uri, id, ".json")
r <- GET(url, add_headers("X-API-KEY" = api_key))
r_text <- content(r, "text")
r_data <- fromJSON(r_text)
return(r_data$results)
}
ken <- id_data_results("C000059")
View(ken)
more_info <- function(state, rep){
id <- get_id(state, rep)
r_results <- id_data_results(id)
r_more <- data.frame(r_results$roles)
together <- merge(r_results, r_more)
info <- together %>%
select(url, office, phone, bills_sponsored) %>%
head(1)
return(info)
}
x <- more_info("CA", "Ken Calvert")
View(x)
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
runApp('C:/Users/natal/Desktop/info201af/a7--naterjavec/app')
install.packages("mapproj")
#------------------Temperature Trends in Cities---------------------
create_temp_trends <- function(){
annual_temp <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
filter(AverageTemperature != "NA") %>%
filter(City %in% c("Kabul", "Dhaka", "Santiago", "Kinshasa", "Delhi",
"Baghdad", "Nairobi", "Kano", "Lagos", "Lima", "Dakar",
"Aleppo", "Harare")) %>%
group_by(City)
temp_trends <- ggplot(annual_temp) +
geom_line(mapping = aes(x = year, y = AverageTemperature, color = City), size = 1)
return(temp_trends)
}
create_temp_trends()
#Download Libraries
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
library(tidyr)
library(mapproj)
#Download data sets as variables
food_prices <- read.csv("data/wfp_market_food_prices.csv")
global_temp <- read.csv("data/GlobalLandTemperaturesByMajorCity.csv")
#See what unique major cities are in the data set to choose from
cities_temp <- unique(global_temp$City)
cities_food <- unique(food_prices$adm1_name)
#Select from list of cities in both datasets
cities_list <- intersect(cities_food, cities_temp)
cities_list <- c(cities_list)
#filters to city and food of choice then selects relevant columns
#temperature data
city_food_data <- function(city, food) {
food_data <- food_prices %>%
filter(adm1_name == city,
cm_name == food,
mp_year < 2014,
mp_month < 10) %>%
mutate(date = paste(mp_year, "-", mp_month, sep = "")) %>%
select(date, mp_price)
return(food_data)
}
#food data starts in 2006 and global temp data begins in 1881
#To make sure we show data that we have collected for both years
#This function includes filtering years > 2006 then selects
#only the columns needed for the Info Vis
city_temp_data <- function(city) {
temp <- global_temp %>%
filter(City == city) %>%
mutate(year = as.numeric(substring(dt, 1, 4))) %>%
mutate(date = paste(year, "-", as.numeric
(substring(dt, 6, 7)), sep = "")) %>%
filter(year > 2005) %>%
select(date, AverageTemperature)
return(temp)
}
#Method to merge the two data sets into one for plot
merge_data <- function(df1, df2) {
return(merge(df1, df2, by = "date"))
}
#Merge isnt working - Ethan will fix dates
example <- merge_data(city_food_data("Delhi", "Wheat"), city_temp_data("Delhi"))
#Fix best fit line, rn just connecting top - not regression
scatter_plot <- function(df){
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter') %>%
add_trace(y = ~mp_price, name = 'Market Price') %>%
add_lines(x = ~date, y = fitted(~mp_price)))
}
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = 'Average Temperature',
type = 'scatter', mode = 'markers',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and Average Temperature (*C)")))
}
data_and_plot <- function(city = "Delhi", food = "Wheat"){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1])) %>%
mutate(temp_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(temp_change != 0) %>%
select(City, Country, temp_change, Longitude, Latitude)
food_change<- food_prices %>%
filter(mp_month == 9) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2014) %>%
mutate(change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(price_change = change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, price_change, mp_month, mp_year)
#Data with percent changes for both food and temperature
percent_change <- merge(food_change, temp_w_percent, by = "City")
create_bar_chart <- function(food){
specific_data <- percent_change[percent_change$cm_name %like% food, ] %>%
select(City, price_change, temp_change)
piping_data <- specific_data %>%
gather("Stat", "Value", -City)
p <- ggplot(piping_data, aes(x = City, y = Value, fill = Stat)) +
geom_col(position = "dodge") +
labs(title = paste(food, "Prices as Compared to Climate Change"),
y = "Percent Change") +
scale_fill_discrete(name = "Legend")
return(ggplotly(p))
}
#------------------Temperature Trends in Cities---------------------
create_temp_trends <- function(){
annual_temp <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
filter(AverageTemperature != "NA") %>%
filter(City %in% c("Kabul", "Dhaka", "Santiago", "Kinshasa", "Delhi",
"Baghdad", "Nairobi", "Kano", "Lagos", "Lima", "Dakar",
"Aleppo", "Harare")) %>%
group_by(City)
temp_trends <- ggplot(annual_temp) +
geom_line(mapping = aes(x = year, y = AverageTemperature, color = City), size = 1)
return(temp_trends)
}
create_temp_trends()
setwd("C:/Users/natal/Desktop/info201af/info201-AF-2-Final-Project")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
shiny::runApp()
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food) {
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = "Average Temperature",
type = "scatter", mode = "markers",
line = list(color = "deeppink", width = 4)) %>%
add_trace(y = ~mp_price, name = "Market Price",
line = list(color = "cyan3", width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and
Average Temperature (*C)")))
}
runApp()
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food) {
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = "Average Temperature",
type = "scatter", mode = "markers",
line = list(color = "cyan3", width = 4)) %>%
add_trace(y = ~mp_price, name = "Market Price",
line = list(color = "cyan3", width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and
Average Temperature (*C)")))
}
runApp()
