name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change'))
p <- plot_ly(specific_data,
x= ~City,
y= ~ food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(specific_data,
x= ~City,
y= ~food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(data = specific_data,
x= ~City,
y= ~food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(data = specific_data,
x= specific_data$City,
y= specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = specific_data$temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
View(specific_data)
p <- plot_ly(specific_data,
x = specific_data$City,
y = specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = specific_data$temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
specific_data <- data.frame(specific_data)
p <- plot_ly(specific_data,
x = specific_data$City,
y = specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = specific_data$temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(specific_data,
x = specific_data$City,
y = specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change')))
create_bar_chart <- function(food){
s_data <- food_percent_data(food)
plot <- plot_ly(s_data,
x = s_data$City,
y = ~temp_change,
type = 'bar',
name = 'Temp Percent Chnage') %>%
add_trace(y = ~food_percent,
name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent'), barmode = 'group')
return(plot)
}
print(create_bar_chart("Rice"))
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1]),
city = City) %>%
mutate(temp_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(temp_change != 0) %>%
select(city, Country, temp_change, Longitude, Latitude)
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1]),
city = City) %>%
mutate(temp_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(temp_change != 0) %>%
select(city, Country, temp_change, Longitude, Latitude)
food_change<- food_prices %>%
filter(mp_month == 9) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2014) %>%
mutate(price_change = mp_price - lag(mp_price, default = mp_price[1]),
city = adm1_name) %>%
mutate(food_percent = price_change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(city, adm0_name, adm1_name, cm_name, food_percent, mp_month, mp_year)
#Data with percent changes for both food and temperature
percent <- merge(food_change, temp_w_percent, by = "city")
View(percent)
create_bar_chart <- function(food){
s_data <- food_percent_data(food)
plot <- plot_ly(s_data,
x = city,
y = ~temp_change,
type = 'bar',
name = 'Temp Percent Chnage') %>%
add_trace(y = ~food_percent,
name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent'), barmode = 'group')
return(plot)
}
print(create_bar_chart("Rice"))
create_bar_chart <- function(food){
s_data <- food_percent_data(food)
plot <- plot_ly(s_data,
x = ~city,
y = ~temp_change,
type = 'bar',
name = 'Temp Percent Chnage') %>%
add_trace(y = ~food_percent,
name = 'Food Price Percent Change') %>%
layout(yaxis = list(title = 'Percent'), barmode = 'group')
return(plot)
}
print(create_bar_chart("Rice"))
p <- plot_ly(specific_data,
x = specific_data$City,
y = specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(specific_data,
x = specific_data$city,
y = specific_data$food_percent,
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = ~temp_change,
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(specific_data,
x = specific_data[["City"]],
y = specific_data[["food_percent"]],
type = 'bar',
name = 'Food Percent Change' %>%
add_trace(y = specific_data[["temp_change"]],
name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
p <- plot_ly(specific_data, x = ~city,y = ~food_percent, type = 'bar', name = 'Food Percent Change' %>%
add_trace(y = ~temp_change, name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
specific_data <- percent_change[percent_change$cm_name %like% "Rice", ] %>%
select(City, food_percent, temp_change)
p <- plot_ly(specific_data, x = ~city,y = ~food_percent, type = 'bar', name = 'Food Percent Change' %>%
add_trace(y = ~temp_change, name = 'Temperature Percent Change') %>%
layout(yaxis = list(title = 'Percent Change'), barmode = 'group'))
#Wheat test
print(create_bar_chart("Oil"))
View(specific_data)
is.data.frame(specific_data)
plot_ly(data = specific_data,
x = ~city,
y = ~temp_change)
plot_ly(data = specific_data,
x = ~City,
y = ~temp_change)
specific_data <- percent_change[percent_change$cm_name %like% "Rice", ] %>%
select(city, food_percent, temp_change)
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1]),
city = City) %>%
mutate(temp_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(temp_change != 0) %>%
select(city, Country, temp_change, Longitude, Latitude)
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
filter(AverageTemperature != "NA") %>%
filter(City %in% c("Kabul", "Dhaka", "Santiago", "Kinshasa", "Delhi",
"Baghdad", "Nairobi", "Kano", "Lagos", "Lima", "Dakar",
"Aleppo", "Harare")) %>%
group_by(City)
temp_trends <- ggplot(annual_temp) +
geom_line(mapping = aes(x = year, y = AverageTemperature, color = City), size = 1)
return(temp_trends)
}
create_temp_trends()
#Download Libraries
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
library(tidyr)
library(mapproj)
#Download data sets as variables
food_prices <- read.csv("data/wfp_market_food_prices.csv")
global_temp <- read.csv("data/GlobalLandTemperaturesByMajorCity.csv")
#See what unique major cities are in the data set to choose from
cities_temp <- unique(global_temp$City)
cities_food <- unique(food_prices$adm1_name)
#Select from list of cities in both datasets
cities_list <- intersect(cities_food, cities_temp)
cities_list <- c(cities_list)
#filters to city and food of choice then selects relevant columns
#temperature data
city_food_data <- function(city, food) {
food_data <- food_prices %>%
filter(adm1_name == city,
cm_name == food,
mp_year < 2014,
mp_month < 10) %>%
mutate(date = paste(mp_year, "-", mp_month, sep = "")) %>%
select(date, mp_price)
return(food_data)
}
#food data starts in 2006 and global temp data begins in 1881
#To make sure we show data that we have collected for both years
#This function includes filtering years > 2006 then selects
#only the columns needed for the Info Vis
city_temp_data <- function(city) {
temp <- global_temp %>%
filter(City == city) %>%
mutate(year = as.numeric(substring(dt, 1, 4))) %>%
mutate(date = paste(year, "-", as.numeric
(substring(dt, 6, 7)), sep = "")) %>%
filter(year > 2005) %>%
select(date, AverageTemperature)
return(temp)
}
#Method to merge the two data sets into one for plot
merge_data <- function(df1, df2) {
return(merge(df1, df2, by = "date"))
}
#Merge isnt working - Ethan will fix dates
example <- merge_data(city_food_data("Delhi", "Wheat"), city_temp_data("Delhi"))
#Fix best fit line, rn just connecting top - not regression
scatter_plot <- function(df){
return(plot_ly(df, x = ~date, y = ~AverageTemperature, name = 'Average Temperature',
type = 'scatter') %>%
add_trace(y = ~mp_price, name = 'Market Price') %>%
add_lines(x = ~date, y = fitted(~mp_price)))
}
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food){
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = 'Average Temperature',
type = 'scatter', mode = 'markers',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~mp_price, name = 'Market Price',
line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and Average Temperature (*C)")))
}
data_and_plot <- function(city = "Delhi", food = "Wheat"){
city_data <- merge_data(city_food_data(city, food), city_temp_data(city))
return(line_plot(city_data, city, food))
}
temp_w_percent <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
group_by(City) %>%
filter(year == 2006 | year == 2012) %>%
mutate(change = AverageTemperature - lag(AverageTemperature, default = AverageTemperature[1])) %>%
mutate(temp_change = change / lag(AverageTemperature, default = AverageTemperature[1]) * 100) %>%
filter(temp_change != 0) %>%
select(City, Country, temp_change, Longitude, Latitude)
food_change<- food_prices %>%
filter(mp_month == 9) %>%
group_by(adm1_name, cm_name) %>%
filter(mp_year == 2006 | mp_year == 2014) %>%
mutate(change = mp_price - lag(mp_price, default = mp_price[1]),
City = adm1_name) %>%
mutate(price_change = change / lag(mp_price, default = mp_price[1]) * 100) %>%
filter(price_change != 0) %>%
select(City, adm0_name, adm1_name, cm_name, price_change, mp_month, mp_year)
#Data with percent changes for both food and temperature
percent_change <- merge(food_change, temp_w_percent, by = "City")
create_bar_chart <- function(food){
specific_data <- percent_change[percent_change$cm_name %like% food, ] %>%
select(City, price_change, temp_change)
piping_data <- specific_data %>%
gather("Stat", "Value", -City)
p <- ggplot(piping_data, aes(x = City, y = Value, fill = Stat)) +
geom_col(position = "dodge") +
labs(title = paste(food, "Prices as Compared to Climate Change"),
y = "Percent Change") +
scale_fill_discrete(name = "Legend")
return(ggplotly(p))
}
#------------------Temperature Trends in Cities---------------------
create_temp_trends <- function(){
annual_temp <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
filter(AverageTemperature != "NA") %>%
filter(City %in% c("Kabul", "Dhaka", "Santiago", "Kinshasa", "Delhi",
"Baghdad", "Nairobi", "Kano", "Lagos", "Lima", "Dakar",
"Aleppo", "Harare")) %>%
group_by(City)
temp_trends <- ggplot(annual_temp) +
geom_line(mapping = aes(x = year, y = AverageTemperature, color = City), size = 1)
return(temp_trends)
}
create_temp_trends()
setwd("C:/Users/natal/Desktop/info201af/info201-AF-2-Final-Project")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("P2analysis.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app.R")
shiny::runApp()
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food) {
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = "Average Temperature",
type = "scatter", mode = "markers",
line = list(color = "deeppink", width = 4)) %>%
add_trace(y = ~mp_price, name = "Market Price",
line = list(color = "cyan3", width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and
Average Temperature (*C)")))
}
runApp()
#TO DO: make into scatterplot with regression lines
#Change x and y axis titles
#Add title that changes with city and food?
line_plot <- function(df, city, food) {
title <- paste(food, "in", city, "Over Time")
return(plot_ly(df, x = ~date, y = ~AverageTemperature,
name = "Average Temperature",
type = "scatter", mode = "markers",
line = list(color = "cyan3", width = 4)) %>%
add_trace(y = ~mp_price, name = "Market Price",
line = list(color = "cyan3", width = 4)) %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Price (local currency) and
Average Temperature (*C)")))
}
runApp()
shiny::runApp()
install.packages("mapproj")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
#------------------Temperature Trends in Cities---------------------
create_temp_trends <- function() {
annual_temp <- global_temp %>%
mutate(month = substring(dt, 6, 7),
year = as.numeric(substring(dt, 1, 4))) %>%
filter(month == "09") %>%
filter(AverageTemperature != "NA") %>%
filter(City %in% c("Kabul", "Dhaka", "Santiago", "Kinshasa", "Delhi",
"Baghdad", "Nairobi", "Kano", "Lagos", "Lima", "Dakar",
"Aleppo", "Harare")) %>%
group_by(City)
temp_trends <- ggplot(annual_temp) +
geom_line(mapping = aes(x = year, y = AverageTemperature, color = City),
size = 1)
return(temp_trends)
}
create_temp_trends()
runApp()
shiny::runApp()
runApp()
runApp()
